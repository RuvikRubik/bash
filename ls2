#include <stdio.h>
#include <sys/types.h>
#include <dirent.h>
#include <errno.h>
#include <string.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <unistd.h>

void printPermissions(mode_t mode) {
    printf((S_ISDIR(mode)) ? "d" : "-");
    printf((mode & S_IRUSR) ? "r" : "-");
    printf((mode & S_IWUSR) ? "w" : "-");
    printf((mode & S_IXUSR) ? "x" : "-");
    printf((mode & S_IRGRP) ? "r" : "-");
    printf((mode & S_IWGRP) ? "w" : "-");
    printf((mode & S_IXGRP) ? "x" : "-");
    printf((mode & S_IROTH) ? "r" : "-");
    printf((mode & S_IWOTH) ? "w" : "-");
    printf((mode & S_IXOTH) ? "x" : "-");
}

void listFiles(const char *dirPath, int recursive) {
    DIR *dir;
    struct dirent *entry;
    struct stat fileStat;
    char filePath[1024];

    dir = opendir(dirPath);
    if (dir == NULL) {
        fprintf(stderr, "Cannot open directory '%s': %s\n", dirPath, strerror(errno));
        return;
    }

    while ((entry = readdir(dir)) != NULL) {
        snprintf(filePath, sizeof(filePath), "%s/%s", dirPath, entry->d_name);
        stat(filePath, &fileStat);

        if (S_ISDIR(fileStat.st_mode)) {
            if (recursive && strcmp(entry->d_name, ".") != 0 && strcmp(entry->d_name, "..") != 0) {
                printf("%s\n", filePath);
                listFiles(filePath, recursive);
            }
        } else {
            printf("%s ", entry->d_name);
            printf("Owner: %d, Group: %d, Size: %ld, Modified: %s, Permissions: ", fileStat.st_uid, fileStat.st_gid, fileStat.st_size, ctime(&fileStat.st_mtime));
            printPermissions(fileStat.st_mode);
            printf("\n");
        }
    }

    closedir(dir);
}

int main(int argc, char *argv[]) {
    int recursive = 0;
    const char *dirPath = ".";

    for (int i = 1; i < argc; i++) {
        if (strcmp(argv[i], "-l") == 0) {
            // Handle -l option
            // Perform necessary actions or set flags
        } else if (strcmp(argv[i], "-R") == 0) {
            // Handle -R option
            recursive = 1;
        } else {
            // Treat the argument as a directory path
            dirPath = argv[i];
        }
    }

    listFiles(dirPath, recursive);

    return 0;
}
